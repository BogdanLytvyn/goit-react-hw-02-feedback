{"version":3,"sources":["components/feedback/feedbackOptions/FeedbackOptions.js","components/feedback/feedBackStatistic/notification/Notification.js","components/feedback/feedBackStatistic/Statistic.js","components/App.js","index.js"],"names":["FeedbackOptions","onBtnClick","this","props","type","name","onClick","Component","Notification","msg","Statistic","good","neutral","bad","total","positaveFeedback","App","state","countTotalFeedback","setState","prevState","countPositiveFeedbackPercentage","Math","round","handleButtonClick","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAGqBA,E,4JACnB,WAAU,IACAC,EAAeC,KAAKC,MAApBF,WACR,OACE,gCACE,wBAAQG,KAAK,SAASC,KAAK,OAAOC,QAASL,EAA3C,kBAGA,wBAAQG,KAAK,SAASC,KAAK,UAAUC,QAASL,EAA9C,qBAGA,wBAAQG,KAAK,SAASC,KAAK,MAAMC,QAASL,EAA1C,wB,GAXqCM,aCAxBC,E,4JACnB,WACE,OACE,mCACE,6BAAKN,KAAKC,MAAMM,Y,GAJkBF,aCCrBG,E,4JACnB,WAAU,IAAD,EACiDR,KAAKC,MAArDQ,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAAKC,EADrB,EACqBA,MAAOC,EAD5B,EAC4BA,iBACnC,OACE,mCACGD,EAAQ,EACP,gCACE,0CACA,uCAAUH,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,EAAQ,EAAIA,EAAQ,IAA/B,OACA,oDACsBC,EAAmB,EAAIA,EAAmB,IADhE,UAMF,cAAC,EAAD,CAAcN,IAAI,4B,GAlBWF,aCAlBS,E,4MACnBC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,mBAAqB,WACnB,EAAKC,UAAS,SAAAC,GAEZ,MAAO,CAAEN,MADKM,EAAUT,KAAOS,EAAUR,QAAUQ,EAAUP,QAG/D,EAAKQ,mC,EAGPA,gCAAkC,WAChC,EAAKF,UAAS,SAAAC,GAMZ,MAAO,CAAEL,iBALgBO,KAAKC,MAC3BH,EAAUT,MACRS,EAAUT,KAAOS,EAAUR,QAAUQ,EAAUP,KAChD,U,EAMRW,kBAAoB,YAAiB,IAC3BnB,EAD0B,EAAboB,OACbpB,KACR,EAAKc,UAAS,SAAAC,GACZ,OAAO,eACJf,EAAOe,EAAUf,GAAQ,MAG9B,EAAKa,sB,4CAGP,WAAU,IAAD,EACiDhB,KAAKe,MAArDN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAAKC,EADrB,EACqBA,MAAOC,EAD5B,EAC4BA,iBACnC,OACE,qCACE,uDACA,cAAC,EAAD,CAAiBd,WAAYC,KAAKsB,oBAClC,cAAC,EAAD,CACEb,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,iBAAkBA,W,GA/CKR,aCEjCmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.57c5cc60.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class FeedbackOptions extends Component {\n  render() {\n    const { onBtnClick } = this.props;\n    return (\n      <div>\n        <button type=\"button\" name=\"good\" onClick={onBtnClick}>\n          Good\n        </button>\n        <button type=\"button\" name=\"neutral\" onClick={onBtnClick}>\n          Neutral\n        </button>\n        <button type=\"button\" name=\"bad\" onClick={onBtnClick}>\n          Bad\n        </button>\n      </div>\n    );\n  }\n}\n\nFeedbackOptions.propTypes = {\n  onBtnClick: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Notification extends Component {\n  render() {\n    return (\n      <>\n        <h3>{this.props.msg}</h3>\n      </>\n    );\n  }\n}\n\nNotification.propTypes = {\n  msg: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Notification from './notification/Notification';\n\nexport default class Statistic extends Component {\n  render() {\n    const { good, neutral, bad, total, positaveFeedback } = this.props;\n    return (\n      <>\n        {total > 0 ? (\n          <div>\n            <h2>Statistc</h2>\n            <p>Good: {good}</p>\n            <p>Neutral: {neutral}</p>\n            <p>Bad: {bad}</p>\n            <p>Total: {total > 0 ? total : '0'} </p>\n            <p>\n              Positive feedback: {positaveFeedback > 0 ? positaveFeedback : '0'}\n              %\n            </p>\n          </div>\n        ) : (\n          <Notification msg=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\n\nStatistic.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number,\n  positaveFeedback: PropTypes.number,\n};\n","import React, { Component } from 'react';\nimport FeedbackOptions from './feedback/feedbackOptions/FeedbackOptions';\nimport Statistic from './feedback/feedBackStatistic/Statistic';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    this.setState(prevState => {\n      const total = prevState.good + prevState.neutral + prevState.bad;\n      return { total };\n    });\n    this.countPositiveFeedbackPercentage();\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    this.setState(prevState => {\n      const positaveFeedback = Math.round(\n        (prevState.good /\n          (prevState.good + prevState.neutral + prevState.bad)) *\n          100,\n      );\n      return { positaveFeedback };\n    });\n  };\n\n  handleButtonClick = ({ target }) => {\n    const { name } = target;\n    this.setState(prevState => {\n      return {\n        [name]: prevState[name] + 1,\n      };\n    });\n    this.countTotalFeedback();\n  };\n\n  render() {\n    const { good, neutral, bad, total, positaveFeedback } = this.state;\n    return (\n      <>\n        <h1>Please leave feedback</h1>\n        <FeedbackOptions onBtnClick={this.handleButtonClick} />\n        <Statistic\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positaveFeedback={positaveFeedback}\n        />\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './globalize.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}